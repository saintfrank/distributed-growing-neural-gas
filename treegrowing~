methods of the MaxManager (ErrorUpdater)


Depth, MaxDepth, Nodes, Manager{manager, depthOfThisManager, NodesOfThisManager} , Parent
MinManager (is created when this one is created, has also Parent Manager (simple list) and Nodes)
N: max number for nodes
M: max number for managerchildren

start with
	Depth = 0
	MaxDepth = 1
	N = ?	maybe 10, should be even >1 (to be able to give half away
	M = ?	maybe 2
	Parent = null
	

addNode(r)
	if(length(Nodes) +1 == N)
		if(length(Manager) == 0)
			Depth = 1 and call Parent.DepthIncreased(this)
			addNewManager(r)
		else
			check for managerchild with minimal depth
			- (if a manager has depth -1, stop searching and take this one)
				request this manager's depth and set it in {thismanager, depth, nodes}
			- (include check if all are at MaxDepth)
				- (if length == M, )
					MaxDepth++
					propagate MaxDepth Increasing
					M++
					increase N somehow
					addNewManager(r)
				- else (same as if(length(Manager) < M)
					addNewManager(r)
			other wise take the one with the minimal depth
			search for the one with minimal Nodes
			and call addNode(r) for this one
	else
		add r to Nodes list
		and to MinManager.Nodes
			
			
addNewManager(r)
	add r to Nodes list
	create new manager m
	give 1/2 (or so) of the nodes to m
	m.MaxDepth = MaxDepth -1
	m.Depth = 0
	m.Parent = this
	m.M = M
	m.N = N - k (e.g. 1 or 2, maybe just m.N = N)
	m.MinManager = new MinManager minman
	minman.Parent = MinManager
	add minman to MinManager.Manager
	MinManager.Nodes = Nodes;
	minman.Nodes = m.Nodes
	add {m, m.D, length(m.Nodes)} to Manager list

DepthIncreased(m)
	set the depth in {m, depth+1, nodes}
	if depth (of m) +1 > Depth
		Depth = depth +1
		Parent.DepthIncreased() //how does this work with Parent = null?

removeNode(r)
	remove r from Nodes list
	remove r from MinManager.Nodes
	send to Parent.lostNode(this)

lostNode(m)
	set {m, -1, nodes}
	Parent.lostNode(this) //how does this work with Parent = null?
