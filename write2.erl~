-module(newWriting).

-export([start/1,write_position/2,read_Pattern/1]).


start(NAME)->

	{ok, File} = file:open(NAME, [write]),

	spawn(writing,write_position,[1,File]),
	spawn(writing,write_position,[2,File]),
	spawn(writing,write_position,[3,File]),
	

	timer:sleep(1000),	


	file:position(File, 0),	

	%%spawn(writing,foo2,[4,File]),
	
	timer:sleep(1000),	

	file:close(File),

	{ok, File2} = file:open(NAME, [read]),

	spawn(writing,read_Pattern,[File2]),
	spawn(writing,read_Pattern,[File2]),
	spawn(writing,read_Pattern,[File2])


.




write_position(N,File)->
	
	io:format(File, "~w	~w	~w~n",[N,N,N])

	%file:write(File,"data to be written ~n"), 
	
. 


read_Pattern(File) ->
		
    case io:get_line(File, "") 
	of
	        eof  -> file:close(File);
	        Line -> io:format( "I've read ~s~n",[Line]),
			Pattern= string:tokens(Line,"	"),
			%%X=lists:nth(1,Line),			
						
			io:format( "READ : ~w~n",[Pattern]),
			read_Pattern(File)
    end
	
.


%%%% get_coordinates(LINE) %%%%%%%%%%
%% given as input a Line containing indefinete number of colons, reads the coordinates a puts them in a List  
%% 
%% + returns a List of coordinates



